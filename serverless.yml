service: elasticpypi

provider:
  name: aws
  runtime: python3.9
  memorySize: 128
  stage: dev
  # profile: 'some-local-aws-config-profile'
  region: us-east-1

  environment:
    SERVICE: ${self:service}
    STAGE: '/${self:provider.stage}'
    BUCKET: ${opt:bucket, 'elasticpypi'}             # CHANGE ME
    TABLE: ${opt:table, 'elasticpypi'}
    USERNAME: ${opt:username, 'elasticpypi'}
    PASSWORD: ${opt:password, 'something-secretive'}   # CHANGE ME
    OVERWRITE: false

plugins:
  - serverless-wsgi
  - serverless-apigw-binary
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - tests/**
    - .cache/**
    - __pycache__/**
    - docs/**

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http:
          path: simple
          method: get
          integration: lambda-proxy
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
      - http:
          path: simple
          method: post
          integration: lambda-proxy
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
      - http:
          path: simple/{name}
          method: get
          integration: lambda-proxy
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  s3:
    handler: elasticpypi.handler.s3
    events:
      - s3:
          bucket: ${self:provider.environment.BUCKET}
          event: s3:ObjectRemoved:*
      - s3:
          bucket: ${self:provider.environment.BUCKET}
          event: s3:ObjectCreated:*
  authorizer:
    handler: elasticpypi.handler.auth

custom:
  wsgi:
    app: elasticpypi.api.app
  apigwBinary:
    types:
      - '*/*'
      - 'application/x-tar'
      - 'application/x-bzip'
      - 'application/zip'
      - 'application/x-gzip'

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    packagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE}
        AttributeDefinitions:
          -
            AttributeName: 'package_name'
            AttributeType: S
          -
            AttributeName: 'version'
            AttributeType: S
          -
            AttributeName: 'normalized_name'
            AttributeType: S
        KeySchema:
          -
            AttributeName: 'package_name'
            KeyType: HASH
          -
            AttributeName: 'version'
            KeyType: RANGE
        GlobalSecondaryIndexes:
          -
            IndexName: 'normalized_name-index'
            KeySchema:
              -
                AttributeName: 'normalized_name'
                KeyType: HASH
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: packagesTable
      Properties:
        PolicyName: ${self:service}-lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.TABLE}/*
        Roles:
          - Ref: IamRoleLambdaExecution
    S3IamPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${self:service}-lambda-s3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.BUCKET}/*
            - Effect: Allow
              Action: s3:ListBucket
              Resource: arn:aws:s3:::${self:provider.environment.BUCKET}
            - Effect: Allow
              Action: s3:PutObject
              Resource: arn:aws:s3:::${self:provider.environment.BUCKET}/*
        Roles:
          - Ref: IamRoleLambdaExecution
    ApiGatewayS3IamRoleExecution:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "apigateway.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        Path: /
    ApiGatewayS3IamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: ApiGatewayS3IamRoleExecution
      Properties:
        PolicyName: ${self:service}-api_gateway-s3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.BUCKET}/*
            - Effect: Allow
              Action: s3:ListBucket
              Resource: arn:aws:s3:::${self:provider.environment.BUCKET}
        Roles:
          - Ref: ApiGatewayS3IamRoleExecution
    Packages:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: packages
        RestApiId:
          Ref: ApiGatewayRestApi
    PackagesName:
      Type: AWS::ApiGateway::Resource
      DependsOn: Packages
      Properties:
        ParentId:
          Ref: Packages
        PathPart: "{name}"
        RestApiId:
          Ref: ApiGatewayRestApi
    PackagesNameMethod:
      Type: AWS::ApiGateway::Method
      DependsOn:
        - PackagesName
        - ApiGatewayS3IamPolicy
      Properties:
        AuthorizationType: "CUSTOM"
        AuthorizerId:
          Ref: AuthorizerApiGatewayAuthorizer
        ResourceId:
          Ref: PackagesName
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: GET
        MethodResponses:
          -
            StatusCode: 200
            ResponseParameters:
              method.response.header.TimeStamp: true
              method.response.header.Content-Length: true
              method.response.header.Content-Type: true
              method.response.header.Cache-Control: true
        RequestParameters:
          method.request.path.name: true
        Integration:
          IntegrationHttpMethod: GET
          Type: AWS
          Uri: arn:aws:apigateway:${self:provider.region}:s3:path/${self:provider.environment.BUCKET}/{key}
          Credentials:
            Fn::GetAtt:
              - ApiGatewayS3IamRoleExecution
              - Arn
          IntegrationResponses:
            -
              StatusCode: 200
              ResponseParameters:
                method.response.header.TimeStamp: integration.response.header.Date
                method.response.header.Content-Length: integration.response.header.Content-Length
                method.response.header.Content-Type: integration.response.header.Content-Type
                method.response.header.Cache-Control: "'public, max-age=31536000'"
          RequestParameters:
            integration.request.path.key: method.request.path.name
